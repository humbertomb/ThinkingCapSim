/* * (c) 2000-2002,2004 Humberto Martinez */ package wucore.gui;import java.awt.*;import javax.swing.*;public class ThreadsWindow extends JFrame implements Runnable{		public static final String		NAME		= "WU-Threads-Window";	protected Thread					curthread	= null;	private volatile boolean			running		= false;	private ChildWindowListener		parent		= null;		//{{DECLARE_CONTROLS	JScrollPane thPanel;	JPanel txPanel;	JTextField freeTF;	JTextField totalTF;	JTextField thsTF;	JLabel label4;	JLabel label3;	JLabel label2;	JLabel label1;	JEditorPane threadsTA;	//}}	// Constructors	public ThreadsWindow ()	{		// This code is automatically generated by Visual Cafe when you add		// components to the visual environment. It instantiates and initializes		// the components. To modify the code, only use code syntax that matches		// what Visual Cafe can generate, or Visual Cafe may be unable to back		// parse your Java file into its visual environment.		//{{INIT_CONTROLS		setSize(520,350);		setTitle("Current Active Threads");				freeTF = new JTextField();		freeTF.setEditable (false);		totalTF = new JTextField();		totalTF.setEditable (false);		thsTF = new JTextField();		thsTF.setEditable (false);		label3 = new JLabel("Free");		label3.setHorizontalAlignment (SwingConstants.RIGHT);		label2 = new JLabel("Total");		label2.setHorizontalAlignment (SwingConstants.RIGHT);		label1 = new JLabel("Memory (Kb)");		label4 = new JLabel("Threads");		label4.setHorizontalAlignment (SwingConstants.RIGHT);				threadsTA = new JEditorPane ();		threadsTA.setEditable (false);		threadsTA.setContentType ("text/html");		threadsTA.setText ("<HTML><B>[Name, Priority, Options]</B></HTML>");		thPanel = new JScrollPane (threadsTA);		txPanel = new JPanel ();		txPanel.setLayout(new GridLayout(1,5));			txPanel.add(label1);		txPanel.add(label2);		txPanel.add(totalTF);		txPanel.add(label3);		txPanel.add(freeTF);		txPanel.add(label4);		txPanel.add(thsTF);		getContentPane().setLayout(new java.awt.BorderLayout(0, 0));		getContentPane().add(thPanel, BorderLayout.CENTER);		getContentPane().add(txPanel, BorderLayout.SOUTH);		//}}		//{{INIT_MENUS		//}}		//{{REGISTER_LISTENERS		SymWindow aSymWindow = new SymWindow();		this.addWindowListener(aSymWindow);		//}}	}	public ThreadsWindow (ChildWindowListener parent)	{		this ();		this.parent = parent;	}	// Class methods	static public int numThreads ()	{		ThreadGroup		tg;		tg = Thread.currentThread ().getThreadGroup ();		return tg.activeCount ();	}			static public String threads ()	{		ThreadGroup		tg;		Thread[]		tha;		Thread			th;		String			opt, tmp;		int				i, n;				tg = Thread.currentThread ().getThreadGroup ();/*		while (tg.getParent () != null)			tg = tg.getParent ();*/		n = tg.activeCount ();		tha = new Thread [n];				tg.enumerate (tha);		tmp = "";		for (i = 0; i < n; i++)		{			th = tha[i];			if (th == null) continue;					opt = "[";			if (th.isAlive ()) opt += "A";			if (th.isInterrupted ()) opt += "I";			if (th.isDaemon ()) opt += "D";			opt += "]";						tmp += "Thread: name = [" + th.getName () + "], pri = [" + th.getPriority () + "], opts = " + opt + "\n";		}		return tmp + "\n";	}	static public String thsToHTML ()	{		ThreadGroup		tg;		Thread[]		tha;		Thread			th;		String			opt, tmp;		int				i, n;				tg = Thread.currentThread ().getThreadGroup ();		/*		 while (tg.getParent () != null)		 tg = tg.getParent ();		 */		n = tg.activeCount ();		tha = new Thread [n];				tg.enumerate (tha);		tmp = "<HTML><B>[Name, Priority, Options]</B><BR>";		for (i = 0; i < n; i++)		{			th = tha[i];			if (th == null) continue;						opt = "";			if (th.isAlive ()) opt += "A";			if (th.isInterrupted ()) opt += "I";			if (th.isDaemon ()) opt += "D";						tmp += "[" + th.getName () + ", " + th.getPriority () + ", " + opt + "]<BR>";		}		return tmp + "</HTML>";	}	// Instance methods		/**     * Shows or hides the component depending on the boolean flag b.     * @param b  if true, show the component; otherwise, hide the component.     * @see java.awt.Component#isVisible     */	public void setVisible(boolean b)	{		setLocation (10, 50);		super.setVisible(b);	}	public void start ()	{		setVisible (true);				if (curthread == null)		{			curthread	= new Thread (this);			curthread.start ();		}	}	public void run ()	{		Thread.currentThread ().setName (NAME);		running		= true;				while (running)		{			showData ();			try { Thread.sleep (1000); } catch (Exception e) { }			Thread.yield ();		}	}	public void close ()	{		if (curthread != null)		{			running		= false;			curthread	= null;		}		if (parent != null)			parent.childClosed (this);		setVisible (false);		dispose ();	}	protected void showData ()	{		Runtime				rt;		long				tm, fm;				rt = Runtime.getRuntime ();		tm = rt.totalMemory () / 1000;		fm = rt.freeMemory () / 1000;				totalTF.setText (new Integer ((int) tm).toString ());		freeTF.setText (new Integer ((int) fm).toString ());		thsTF.setText (new Integer ((int) numThreads ()).toString ());		threadsTA.setText (thsToHTML ());	}				public void addNotify()	{	    // Record the size of the window prior to calling parents addNotify.	    Dimension d = getSize();	    		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the insets		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point p = components[i].getLocation();			p.translate(getInsets().left, getInsets().top);			components[i].setLocation(p);		}		fComponentsAdjusted = true;	}    // Used for addNotify check.	boolean fComponentsAdjusted = false;	class SymWindow extends java.awt.event.WindowAdapter	{		public void windowClosing(java.awt.event.WindowEvent event)		{			Object object = event.getSource();			if (object == ThreadsWindow.this)				ThreadsWindow_WindowClosing(event);		}	}		void ThreadsWindow_WindowClosing(java.awt.event.WindowEvent event)	{		close ();	}}