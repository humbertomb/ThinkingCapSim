/* * (c) 2000-2002 Humberto Martinez */package wucore.gui;import java.awt.*;import java.io.*;import javax.swing.*;import ptolemy.plot.*;public class PlotWindow extends JFrame{	static public int				POINTS		= 50;	static public final int			OFFSET		= 50;		static public String				PSUFFIX		= ".plot";	static private int				counter		= 0;		protected Plot					plot;	protected ChildWindowListener		parent		= null;		protected int					curx			= 0;	protected PrintWriter				stream		= null;		protected PlotWindow ()	{				plot	= new Plot ();		curx	= 0;	}		public PlotWindow (String title)	{		this ();				init_interface (title);		this.parent = null;				counter ++;	}		public PlotWindow (ChildWindowListener parent, String title)	{		this ();				init_interface (title);		this.parent = parent;				counter ++;	}		private void init_interface (String title)	{		// This code is automatically generated by Visual Cafe when you add		// components to the visual environment. It instantiates and initializes		// the components. To modify the code, only use code syntax that matches		// what Visual Cafe can generate, or Visual Cafe may be unable to back		// parse your Java file into its visual environment.		//{{INIT_CONTROLS		setVisible (false);		setTitle (title);			setLocation (250 + counter * OFFSET, counter * OFFSET);				getContentPane ().add ("Center", plot);		setVisible (true);		plot.setGrid (true);		plot.setColor (true);		plot.setMarksStyle ("none");		plot.setConnected (true);		plot.setButtons (false);		pack ();		setSize (584,300);				//{{INIT_MENUS		//}}				//{{REGISTER_LISTENERS		SymWindow aSymWindow = new SymWindow();		this.addWindowListener(aSymWindow);		//}}	}		public void open ()	{		open (null);	}		public void open (String name)	{		setVisible (true);				dump_stop ();		if (name != null)	dump_start (name + PSUFFIX, "Data Plotting");	}		public synchronized void close ()	{		dump_stop ();				if (parent != null)			parent.childClosed (this);				setVisible (false);		dispose ();	}		public void setLegend (String[] labels)	{		int			i;				plot.clearLegends ();		for (i = 0; i < labels.length; i++)			plot.addLegend (i, labels[i]);	}		public void setLabels (String horiz, String vert)	{		plot.setXLabel (horiz);		plot.setYLabel (vert);	}		public void setImpulses (boolean stems)	{		plot.setImpulses (stems);	}		public void setYRange (double ymin, double ymax)	{		plot.setYRange (ymin, ymax);	}		public void updateData (double[] data)	{		int			i;				if (data == null)			return;				dump_data (data);						curx ++;		for (i = 0; i < data.length; i++)			plot.addPoint (i, curx, data[i], true);				if (curx > POINTS)		plot.setXRange ((double)  (curx - POINTS), (double) curx);				plot.repaint ();	}			public void updateData (double[][] data, int n, int m)	{		int			i, j;				if (data == null)			return;				plot.clear (false);		for (i = 0; i < n; i++)		{			dump_data (data[i]);					for (j = 1; j < m; j++)				plot.addPoint (j-1, data[i][0], data[i][j], true);				}			plot.setXRange (data[0][0], data[n-1][0]);			plot.repaint ();	}			protected void dump_start (String name, String title)	{		File				file;				if (name == null)			return;				file = new File (name);		try 		{			stream = new PrintWriter (new BufferedOutputStream (new FileOutputStream (file)));			if (title != null)				stream.println ("# " + title);			stream.flush ();		} catch (Exception e) { stream = null; }	}		protected void dump_data (double[] current)	{		int			i;				if ((stream == null) || (current == null)) 	return;				for (i = 0; i < current.length; i++)			stream.print (current[i] +  "\t");				stream.println (" ");		stream.flush (); 	}		protected void dump_data (String[] labels)	{		int			i;				if ((stream == null) || (labels == null)) 	return;				for (i = 0; i < labels.length; i++)			stream.print (labels[i] +  "\t");				stream.println (" ");		stream.flush (); 	}		protected void dump_stop ()	{		if (stream == null) return;				stream.flush (); 		stream.close (); 		stream = null;	}		public void addNotify()	{		// Record the size of the window prior to calling parents addNotify.		Dimension d = getSize();				super.addNotify();				if (fComponentsAdjusted)			return;				// Adjust components according to the insets		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point p = components[i].getLocation();			p.translate(getInsets().left, getInsets().top);			components[i].setLocation(p);		}		fComponentsAdjusted = true;	}		// Used for addNotify check.	boolean fComponentsAdjusted = false;		class SymWindow extends java.awt.event.WindowAdapter	{		public void windowClosing(java.awt.event.WindowEvent event)		{			Object object = event.getSource();			if (object == PlotWindow.this)				PlotWindow_WindowClosing(event);		}	}		void PlotWindow_WindowClosing(java.awt.event.WindowEvent event)	{		close ();	}}