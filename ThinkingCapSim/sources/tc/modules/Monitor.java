/* * (c) 2002-2004 Humberto Martinez */ package tc.modules;import java.util.*;import tc.shared.linda.*;import tc.vrobot.*;import tc.gui.*;import tclib.planning.sequence.*;import tclib.utils.fusion.*;public class Monitor extends Controller{	protected Tuple					gtuple;	protected ItemGoal				gitem;		protected Tuple					dtuple;	protected ItemDebug				ditem;		protected Tuple					ptuple;	protected ItemPlan				pitem;		protected Tuple					ltuple;	protected ItemLindaCtrl			litem;	protected Tuple					drtuple;	protected ItemDelRobot			dritem;	protected Tuple					utuple;	protected ItemGUICtrl			uitem;	protected Tuple					bNameTuple;	protected ItemBehName			bNameItem;		protected Tuple					bDebugTuple;	protected ItemBehDebug			bDebugItem;		protected Tuple					rNamesTuple;	protected ItemBehRules			rNamesItem;	protected GUIMonitor				listener		= null;	protected String					robotid		= LindaEntryFilter.ANY;	// Constructors	public Monitor (Properties props, Linda linda) 	{		super (props, linda);	}		public Monitor (Properties props, GUIMonitor listener, Linda linda) 	{		this (props, linda);				this.listener		= listener;	}			// Instance methods	protected void initialise (Properties props)	{				super.initialise (props);				gitem	= new ItemGoal ();		gtuple	= new Tuple (Tuple.GOAL, gitem);		ditem	= new ItemDebug ();		dtuple	= new Tuple (Tuple.DEBUG, ditem);		pitem 	= new ItemPlan ();		ptuple 	= new Tuple (Tuple.PLAN, pitem);						litem 	= new ItemLindaCtrl ();		ltuple 	= new Tuple (Tuple.LINDACTRL, litem);				dritem 	= new ItemDelRobot();		drtuple 	= new Tuple (Tuple.DELROBOT, dritem);				uitem 	= new ItemGUICtrl ();		utuple 	= new Tuple (Tuple.GUICTRL, uitem);						bNameItem	= new ItemBehName();		bNameTuple	= new Tuple(Tuple.BEHNAME, bNameItem);					bDebugItem	= new ItemBehDebug();		bDebugTuple = new Tuple(Tuple.BEHDEBUG, bDebugItem);				rNamesItem = new ItemBehRules();		rNamesTuple = new Tuple(Tuple.BEHRULES, rNamesItem);	}	public void step (long ctime) { }	public void setID (String robotid)	{		this.robotid		= robotid;				mtuple.space		= robotid;		gtuple.space		= robotid;		ptuple.space  	= robotid;		ltuple.space		= robotid;		utuple.space		= robotid;				bNameTuple.space = robotid;		rNamesTuple.space = robotid;		bDebugTuple.space = robotid;//		ditem.space		= robotid;	}		public final String getID () { return robotid; }		public void setCommand (int command)	{		ditem.command (command, System.currentTimeMillis ());		linda.write (dtuple);	}		public void setDebug (boolean rob, boolean per, boolean con, boolean nav, boolean pla)	{		ditem.debug (rob, per, con, nav, pla, System.currentTimeMillis ());		linda.write (dtuple);	}		public void setMode (int rob, int per, int con, int nav, int pla)	{		ditem.mode (rob, per, con, nav, pla, System.currentTimeMillis ());		linda.write (dtuple);	}		public void setGoal (double gx, double gy)	{		gitem.set (gx, gy, System.currentTimeMillis ());		linda.write (gtuple);	}		public void setPlan (Sequence seq)	{		pitem.set (seq, System.currentTimeMillis ());		linda.write (ptuple);	}			public void setLindaTimeout (long timeout)	{		litem.cmd=ItemLindaCtrl.TIMEOUT;		ltuple.space=robotid;		litem.param=timeout;		litem.timestamp=new Long(System.currentTimeMillis());		linda.write(ltuple);	}		public void setLindaCtrl (int command)	{		litem.set (command, System.currentTimeMillis ());		linda.write (ltuple);		switch (command)		{		case ItemLindaCtrl.DELETE:			if (listener != null)		listener.deleteConfiguration (ltuple.space);			break;		case ItemLindaCtrl.DUMPREG:		case ItemLindaCtrl.DUMPSPC:		case ItemLindaCtrl.TIMEOUT:		default:		}	}	public void setDelRobot(String id){		dritem.set(ItemDelRobot.DELETE,id,System.currentTimeMillis());		linda.write(drtuple);		try {			Thread.sleep(1000);		} catch (InterruptedException e) {			e.printStackTrace();		}		dritem.set(ItemDelRobot.INFO,id,System.currentTimeMillis());		linda.write(drtuple);	}		public void setGUIServiceCtrl (int type, String service)	{		uitem.set (type, service, System.currentTimeMillis ());		linda.write (utuple);	}		public void setGUIActionCtrl (int type, String service, String action, Object[] params)	{		uitem.set (type, service, action, params, System.currentTimeMillis ());		linda.write (utuple);	}		public void setGUIEventCtrl (String service, String action, EventObject event)	{		uitem.set (ItemGUICtrl.ACT_EVENT, service, action, event, System.currentTimeMillis ());		linda.write (utuple);	}		public void setGUITimeoutCtrl (long timeout)	{		uitem.set (ItemGUICtrl.SVC_TIMEOUT, timeout, System.currentTimeMillis ());		linda.write (utuple);	}		public void setBehaviourName(String behName)	{		bNameItem.set(behName);		linda.write(bNameTuple);	}		public void setBehaviourRuleNames(ArrayList ruleNamesList) {		rNamesItem.set(ruleNamesList);		linda.write(rNamesTuple);	}		public void setBehaviourDebug(int command) {		bDebugItem.setCommand(command);		linda.write(bDebugTuple);	}		public void notify_beh_info(String space, ItemBehInfo item) {		if (listener != null)			listener.updateBehInfo (space, item);	}		public void notify_config (String space, ItemConfig item)	{		super.notify_config (space, item);				if (listener != null)		{			listener.updateWorldMap (space, item.props_world);			if (item.props_robot != null)				listener.changeConfiguration (space, new RobotDesc (item.props_robot), new FusionDesc (item.props_robot));		}	}		public void notify_monitor (String space, ItemMonitor item)	{		if (listener != null)			listener.updateRobot (space, item.data, item.lpos);		}	public void notify_goal (String space, ItemGoal item)	{		if (listener != null)			listener.updateGoal (space, item.task.tpos);		}		public void notify_status (String space, ItemStatus item)	{		if (listener != null)			listener.updateStatus (space, item.timestamp.longValue (), item.type, item.message);	}	}