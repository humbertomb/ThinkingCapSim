/* * (c) 2001 Humberto Martinez */ package tc.modules;import java.util.*;import tc.runtime.thread.*;import tc.shared.linda.*;import tc.shared.lps.*;import tc.shared.world.World;import tc.vrobot.*;import tclib.utils.fusion.*;public abstract class Controller extends StdThread{	protected World					world;					// A priori world model	protected RobotDesc				rdesc;					// Robot description	protected FusionDesc			fdesc;					// Fusion method description	protected LPS					lps;						// Local Perceptual Space		// Linda related variables	protected Tuple					mtuple;	protected ItemMotion			mitem;	protected Tuple					dtuple;	protected ItemDataCtrl			ditem;	protected Tuple					btuple;	protected ItemBehResult			bitem;	// Constructors	protected Controller (Properties props, Linda linda)	{		super (props, linda);	}	// Instance methods	protected void initialise (Properties props)	{				// Setup local stuff		mitem	= new ItemMotion ();		mtuple	= new Tuple (Tuple.MOTION, mitem);		ditem	= new ItemDataCtrl ();		dtuple	= new Tuple (Tuple.DATACTRL, ditem);		bitem	= new ItemBehResult ();		btuple	= new Tuple (Tuple.BEHRESULT, bitem);	}	public void setMotion (double speed, double turn)	{		if (mitem == null)		return;				mitem.set (speed, turn, System.currentTimeMillis ());		linda.write (mtuple);	}		public void setMotion (int mode, double speed, double turn)	{		if (mitem == null)		return;				mitem.set (mode, speed, turn, System.currentTimeMillis ());		linda.write (mtuple);	}			public void setResult (int result, int reason, long serial)	{		if (bitem == null)		return;				bitem.set (result, reason, serial, System.currentTimeMillis ());		linda.write (btuple);	}	public void setRobotCtrl (RobotDataCtrl dctrl)	{		if (ditem == null)		return;				ditem.set (dctrl, System.currentTimeMillis ());		linda.write (dtuple);	}		public void notify_config (String space, ItemConfig item)	{		if (item.props_robot != null)		{			rdesc		= new RobotDesc (item.props_robot);			fdesc		= new FusionDesc (item.props_robot);		    		    state 		= RUN;	    }				if (item.props_world != null)			world = new World (item.props_world);	}		public void notify_debug (String space, ItemDebug item) 	{				super.notify_debug (space, item);				switch (item.operation)		{		case ItemDebug.DEBUG:			debug	= item.dbg_controller;			break;		case ItemDebug.MODE:			mode	= item.mode_controller;			break;		case ItemDebug.COMMAND:		default:		}		}			public void notify_lps (String space, ItemLPS item) 	{ 		if (state != RUN)				return;				lps		= item.lps;				try		{			if (tdesc.passive)				step (System.currentTimeMillis ());		} catch (Exception e) { e.printStackTrace (); }	}	}