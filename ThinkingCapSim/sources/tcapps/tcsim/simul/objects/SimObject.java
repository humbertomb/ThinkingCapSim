/* * (c) 2004 Humberto Martinez Barbera */ package tcapps.tcsim.simul.objects;import java.io.*;import java.util.*;import tc.shared.world.*;import wucore.utils.geom.*;public class SimObject{	public WMObject			odesc;	public double			radius;	public int 				idsimul;	// Constructors	public SimObject (String descfile)	{				Properties		props;		File				file;		FileInputStream	stream;		props			= new Properties ();		try		{			file 		= new File (descfile);			stream 		= new FileInputStream (file);			props.load (stream);			stream.close ();		} catch (Exception e) { e.printStackTrace (); }		fromProperties (props);		}		public SimObject (Properties props)	{		fromProperties (props);	}	// Instance methods	protected void fromProperties (Properties props)	{		int				i;		String			prop;		double			min, max;		Line2[]			icon;				prop		= props.getProperty ("OBJECT");		odesc	= new WMObject (prop);				// Compute bounding circle radius		min		= Double.MAX_VALUE;		max		= -Double.MAX_VALUE;		icon		= odesc.icon;		for (i = 0; i < icon.length; i++)		{			if (icon[i].orig().x() < min)		min = icon[i].orig().x();			if (icon[i].orig().y() < min)		min = icon[i].orig().y();			if (icon[i].dest().x() < min)		min = icon[i].dest().x();			if (icon[i].dest().y() < min)		min = icon[i].dest().y();			if (icon[i].orig().x() > max)		max = icon[i].orig().x();			if (icon[i].orig().y() > max)		max = icon[i].orig().y();			if (icon[i].dest().x() > max)		max = icon[i].dest().x();			if (icon[i].dest().y() > max)		max = icon[i].dest().y();		}		radius	= Math.max (-min, max);	}	public String toString(){		return "odesc="+odesc.toRawString()+" radius="+radius+" idsimul="+idsimul;	}}