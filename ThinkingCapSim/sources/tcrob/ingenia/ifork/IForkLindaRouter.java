/* * (c) 2003 Juan Pedro Canovas */ package tcrob.ingenia.ifork;import tc.coord.*;import tc.shared.linda.*;import tcrob.ingenia.ifork.linda.*;public class IForkLindaRouter extends LindaRouter{	public IForkLindaRouter (String robotid, Linda linda, Linda lindaglobal)	{		super (robotid, linda, lindaglobal);		//For warehouse coordination		this.lindalocal.register (new Tuple (IForkTuple.SYNC), this);		this.lindalocal.register (new Tuple (IForkTuple.COORD), this);				this.lindaglobal.register (new Tuple (robotid, IForkTuple.SYNC, null), this);			this.lindaglobal.register (new Tuple (IForkTuple.COORD), this);	}		public void notify (Tuple tuple)	{				if ((tuple.key == null) || (tuple.value == null))		return;				//Tuples for warehouse coordination		if (tuple.key.equals (IForkTuple.SYNC)) 		{			ItemSync syncitem;			//			System.out.print ("[IForkLindaRouter] Tuple Warehouse "+tuple);			syncitem = (ItemSync)tuple.value;						//establish direction			if (tuple.space != null && tuple.space.equals (robotid) && syncitem.message == ItemSync.CONTINUE)			{ //global to local if robotid == my id//				System.out.println ("IForkLindaRouter:"+syncitem.toString()+" from global to local "+tuple);				tuple.space = LindaEntryFilter.ANY;				lindalocal.write (tuple);			}			else if (tuple.space != null && tuple.space.equals(LindaEntryFilter.ANY) && (syncitem.message == ItemSync.WAITING || 			    syncitem.message == ItemSync.BYE || syncitem.message == ItemSync.AGVIN)) //local to global			{//				System.out.println ("IForkLindaRouter:"+syncitem.toString()+" from local to global "+tuple);				tuple.space	= robotid;				lindaglobal.write (tuple);			}			//else System.out.println (whitem.toString()+" with robotid <"+tuple.value.robotid+">");		}		else if (tuple.key.equals (IForkTuple.COORD))		{			//System.out.print ("  [LindaRouter."+robotid+"]: "+tuple);						if (tuple.space.equals (LindaEntryFilter.ANY)) // local to global			{				//System.out.println (" => to GLOBAL space");				tuple.space = robotid;				lindaglobal.write (tuple);				}			else // global to local			{				ItemCoordination coorditem = (ItemCoordination)tuple.value;				if (!tuple.space.equals (robotid) && !coorditem.passed)				{										//System.out.println (" => to LOCAL space");					coorditem.passed = true;					tuple.set (tuple.space, IForkTuple.COORD,coorditem);									lindalocal.write (tuple);					}				//else System.out.println (" => DISCARDED");			}		}		else super.notify (tuple);	}}