/** * Copyright: Copyright (c) 2001 * Company: Grupo ANTS - Proyecto MIMICS * @author Humberto Martinez Barbera (humberto@um.es) * @version 1.0 */package devices.drivers.radar;import devices.data.RadarData;public abstract class Radar extends Object implements Runnable{	public static final int			MAXDATA = 30;		// Maximum number of target point sets	protected String				classn;				// Current class name	protected String				port;				// Current serial port	protected RadarData[]			data;				// Buffer of radar target points	protected RadarData				empty;				// Structure for no-data return	protected int					num;				// Number of points in buffer	// Constructors	protected Radar ()	{	}		// Class methods    public static Radar createRadar (String desc) throws RadarException    {		Class			aclass;		Radar			radar;		String			_class;		String			_port;		Thread			thread;		int				i;				try		{			_class	= desc.substring (0, desc.indexOf ("|"));			_port	= desc.substring (desc.indexOf ("|")+1, desc.length ());			aclass	= Class.forName (_class);			radar	= (Radar) aclass.newInstance ();			radar.initialise (_port);			radar.setPort (_port);			radar.setType (_class);		} catch (Exception e) { throw (new RadarException (e.toString ())); }		// Initialise target stores		radar.data	= new RadarData[MAXDATA];		for (i = 0; i < MAXDATA; i++)			radar.data[i]	= new RadarData (radar.maxTargets ());		radar.num = 0;		radar.empty	= new RadarData (radar.maxTargets ());				// Run driver as a stand-alone thread		thread		= new Thread (radar);		thread.start ();				return radar;    }	// Accessors    public abstract int		maxTargets ();    public void				setType (String c)			{ classn = c; }	public void				setPort (String p)			{ port = p; }	public String			getType ()					{ return classn; }	public String			getPort ()					{ return port; }	// Instance methods    protected abstract void initialise (String port) throws RadarException;    protected abstract void update (RadarData current) throws RadarException;    public RadarData getRadarData () throws RadarException    {    	int			k;    			// System.out.println ("WARNING: Radar.getRadarData () current count="+num);		k	= num;    	if (k < 1)			return empty;       	num	= 0;    	return data[k];    }        public void run ()    {		Thread.currentThread ().setName ("Thread-Radar");			System.out.println ("  [Radar] Starting Radar thread");    	while (true)    	{    		try { update (data[num]); } catch (Exception e)     		{     			System.out.println ("--[Radar] run () exception updating data");    			e.printStackTrace ();     		}    		if (data[num].num > 0)		num ++;    	}    }}