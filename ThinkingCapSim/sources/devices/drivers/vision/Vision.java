/* * (c) 2002 Humberto Martinez */ package devices.drivers.vision;import devices.data.*;public abstract class Vision extends Thread{	// Communication parameters and instance class	protected String						clase;	protected int							port;		// Processed objects information	protected VisionData[]					odata;	protected int							maxobjs;		// Flow control and locking	protected boolean						updated		= false;	protected boolean						debug		= false;		// Class methods	public static Vision getVision (String props) throws VisionException	{		Vision			vis;		String			cname;		String			param;		Class			clase;		try		{   				cname	= props.substring (0,props.indexOf("|"));			param	= props.substring (props.indexOf("|")+1,props.length());			clase	= Class.forName (cname);        			System.out.println ("Vision: initialising "+cname+" with "+param+".");        			vis		= (Vision) clase.newInstance ();			vis.initialise (param);        		} catch (Exception e) { throw new VisionException ("(getVision) "+e.toString ()); }				return vis;		}		// Accessors	public final synchronized void			setUpdated (boolean updated)	{ this.updated = updated; }		public final synchronized boolean		isUpdated ()					{ return updated; }		public final VisionData[]				getData ()						{ return odata; }		public final void						setDebug (boolean debug)		{ this.debug = debug; }	public final boolean					getDebug ()						{ return debug; }		// Instance methods	public abstract void initialise (String param) throws VisionException;	public abstract void acquire_frame ();}