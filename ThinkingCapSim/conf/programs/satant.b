/* -------------------- *//* F U Z Z Y    S E T S *//* -------------------- */// Sets for security braking (s)set DANGER	= trapezoid {0.0, 0.0, 1.0, 1.5};set CLOSE	= trapezoid {1.0, 1.5, 2.5, 3.0};set FAR		= trapezoid {2.5, 3.0, 10000.0, 10000.0};// Sets for steering (deg/s)set TTR		= trapezoid {-150.0, -150.0, -16.0, -15.0};		// Tight Rightset TR		= trapezoid {-16.0, -15.0, -6.5, -5.5};			// Rightset TSR		= trapezoid {-6.5, -5.5, -3.5, -2.5};			// Small Rightset TC		= trapezoid {-3.5, -2.5, 2.5, 3.5};				// Centerset TSL		= trapezoid {2.5, 3.5, 5.5, 6.5};				// Small Leftset TL		= trapezoid {5.5, 6.5, 15.0, 16.0};				// Leftset TTL		= trapezoid {15.0, 16.0, 150.0, 150.0};			// Tight Left// Sets for speed (%)set SSTOP	= crisp {0.0};									// Stop carset SLOW	= trapezoid {0.0, 0.0, 0.2, 0.3};				// Slow desired speedset SHALF	= trapezoid {0.2, 0.3, 0.7, 0.8};				// Half desired speedset SFULL	= trapezoid {0.7, 0.8, 1.5, 1.5};				// Full desired speed// Sets for braking (boolean)set BRAKE	= crisp {1.0};									// Apply brakesset NBRAKE	= crisp {0.0};									// Do not apply brakes// Sets for blending [0 .. 1] set LOW		= trapezoid {0.0, 0.0, 0.1, 0.2};				// Lowset HALFL	= trapezoid {0.1, 0.2, 0.4, 0.5};				// Mediumset HALFH	= trapezoid {0.4, 0.5, 0.7, 0.8};				// Mediumset HIGH	= trapezoid {0.7, 0.8, 1.0, 1.0};				// High// Sets for goal differences (rad)set GN		= trapezoid {-3.5, -3.5, -0.87, -0.52};			// Negativeset GSN		= trapezoid {-0.87, -0.52, -0.087, 0.0};		// Small Negativeset GZ		= trapezoid {-0.087, -0.02, 0.02, 0.087};		// Zeroset GSP		= trapezoid {0.0, 0.087, 0.52, 0.87};			// Small Positiveset GP		= trapezoid {0.52, 0.87, 3.5, 3.5};				// Positive/* ----------------- *//* V A R I A B L E S *//* ----------------- */// External Blackboard Variablessensor float		group0, target, self;sensor float 		alpha, heading;effector float 		turn, speed, brake;// State and Control Variablesfloat 				front; 									// Radar sensor/* ----------------- *//* C O N S T A N T S *//* ----------------- */float				TRUE	= 1.0;float				FALSE	= 0.0;/* --------------------------- *//* I N I T I A L I Z A T I O N *//* --------------------------- */initialization{	turn	= 0.0;	speed	= 0.0;	}/* ----------- *//* A G E N T S *//* ----------- */agent ReactiveControl{	blending	front range (0.0, 40.0);	common	{		front	= group0 / self;			// Time to collide with object (be it the leading car or an obstacle)	}	behaviour avoidF priority 1.0	{		fusion		speed, brake;		float		vel;				rules		{			background (0.01)				brake is NBRAKE;			background (0.01)				vel is SFULL;			if (front is DANGER)			vel is SSTOP, brake is BRAKE;			if (front is CLOSE)				vel is SHALF;			if (front is FAR)				vel is SFULL;		}		speed	= target * vel;	}	behaviour toGoal priority 0.3	{		fusion		turn, speed;		float		diff, vel;		diff	= heading - alpha;					rules		{			if (diff is GP)			turn is TTL,	vel is SHALF;			if (diff is GSP)		turn is TL,		vel is SFULL;			if (diff is GZ)			turn is TC,		vel is SFULL;			if (diff is GSN)		turn is TR,		vel is SFULL;			if (diff is GN)			turn is TTR,	vel is SHALF;		}		speed	= target * vel;	}		behaviour keepSpd priority 0.3	{		fusion		speed;		speed	= target;	}		// OJO: no se pueden usar ORs en las reglas del blender, y SOLO conjuntos trapezoidales	blender	{		rules		{			background (0.01)			avoidF is LOW;			background (0.01)			toGoal is HIGH;			background (0.01)			keepSpd is HIGH;			if (front is DANGER)		avoidF is HIGH, 	toGoal is LOW, 		keepSpd is LOW;			if (front is CLOSE) 		avoidF is HALFH, 	toGoal is HIGH, 	keepSpd is HALFL;			if (front is FAR) 			avoidF is LOW, 		toGoal is HIGH, 	keepSpd is HIGH;		}	}}